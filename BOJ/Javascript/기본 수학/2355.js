/**
 * # 첫번째 풀이 =====> 런타임 에러 ======> 입력값이 잘못되었거나 입력에서 문제 발생
 * # Array().keys()이용
 * Array(size)를 넣으면 크기가 size인 배열이 생성되는데 모든 값은 empty를 가진다.
 * 이를 keys() 메서드를 사용하면 배열의 인덱스를 순회하는 이터레이터를 반환하고
 * 이를 spread 연산자를 이용해 배열로 만들 수 있다.
 * [...Array(5).keys()]; // [0, 1, 2, 3, 4]
 * [...Array(5).keys()].map(key => key + 10); // [10, 11, 12, 13, 14]
 *
 *
 * # 두번째 풀이, A가 작은 수만 들어올 거라는 조건이 없음, A, B 중 작은 값을 구해야함
 * # for문도, array도 시간초과에 런타임 에러남
 *
 * # 0.25초 => for문 사용하면 뒤지는 거임 => 이거 무조건 가우스 계산법 사용해서 풀어야 한다.
 * 가우스 공식 => n(n+1)/2
 *
 * 🍕🍕가우스의 덧셈이란 ?
 * 1~10까지 숫자를 더한 합은? 앞의 숫자와 뒤의 숫자를 더한 합 11,
 * 개수는 전체 개수의 절반인 5개이므로 55개라는 결과를 도출해낼 수 있다.
 * 11 * 5이므로 55이다.
 *
 * 🍕🍕수식:
 * A~B까지의 숫자를 더한 합은?
 * 처음 숫자와, 마지막 숫자를 더한 합 = (A+B)
 * 더한 숫자의 개수 = B-A+1
 * 더한 숫자의 개수 총합의 1/2 = (B-A+1)*1/2
 * ======> (A+B)*(B-A+1)*1/2
 *
 * 문제: 두 정수 A와 B가 주어졌을 때, 두 정수 사이에 있는 수의 합을 구하는 프로그램을 작성하시오.
 * 사이에 있는 수들은 A와 B도 포함한다.
 *
 * 입력: 첫째 줄에 두 정수 A, B가 주어진다. (-2,147,483,648 ≤ A, B ≤ 2,147,483,647)
 *
 * 출력: 첫째 줄에 답을 출력한다. (-2,147,483,648 ≤ 답 ≤ 2,147,483,647)
 *
 * 입력: 1 2
 *
 * 출력: 3
 */
// let [A, B] = require('fs')
//   .readFileSync('/dev/stdin')
//   .toString()
//   .split(' ')
//   .map(Number);

let [A, B] = require('fs')
  .readFileSync(
    'c:/Users/HayeongShin/Algorithm/Problem_Solving/BOJ/Javascript/test.txt',
  )
  .toString()
  .split(' ')
  .map(Number);
// (A+B)*(B-A+1)*1/2

let min = Math.min(A, B);
let max = Math.max(A, B);
let n = max - min + 1;
console.log((min + max) * n * 0.5);
